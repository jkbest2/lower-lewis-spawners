model {
  #-----------------------------------------------
  #~~~~DATA:
  # M: number of fish in augmented data
  # K: number of capture events
  # origin: [M] vector taking values 0 or 1
  # sex: [M] vector taking values 0 or 1
  # resid: [M] vector taking values 0 or 1
  # z: [M x K] matrix taking values NA, 1, 2, 3, or 4
  # y: [M x K] matrix taking values 1, 2, 3, or 4
  # avail: [M x K] matrix taking values 0 or 1

  #-----------------------------------------------
  #####STATES:
  # Ecological States: 1 - Potential Population
  #                    2 - Returning Fish
  #                    3 - Kelt/Spawner
  #                    4 - Trap

  # Observed States:   1 - Not Observed
  #                    2 - Tangle Net trapped
  #                    3 - Tangle Net trapped Kelt
  #                    4 - Trapped

  #####PARAMETERS:
  #beta: origin ratio
  #sex_ratio: male-female ratio
  #resid_ratio: residual ratio
  #gamma: entry probability
  #delta: probability of becoming a spawner
  #phi: probability of moving to trap
  #p: tangle-net capture probability

  ####PRIORS AND CONSTRAINTS:

  mean.p  ~ dnorm(-1.5, 1)        #prior on tangle net detetion efficiency which we expect to be low
  sigma.p ~ dnorm(0, 0.5) T(0,) #prior on standard deviation for detection efficieny random effect (per event)
  tau.p   <- pow(sigma.p, -2)

  mean.gamma  ~ dt(0, .1, 7)
  sigma.gamma ~ dnorm(0, 0.5) T(0,) #standard deviation for probability of survival random effect (release group)
  tau.gamma   <- pow(sigma.gamma, -2)

  beta_delta[1] ~ dt(0, .1, 7)
  beta_delta[2] ~ dt(0, .25, 7)
  beta_delta[3] ~ dt(0, .25, 7)
  beta_delta[4] ~ dt(0, .25, 7)

  sigma.delta ~ dnorm(0, 0.5) T(0,) #standard deviation for probability of survival random effect (release group)
  tau.delta   <- pow(sigma.delta, -2)

  beta_phi[1] ~ dt(0, .1, 7)
  beta_phi[2] ~ dt(0, .25, 7)
  beta_phi[3] ~ dt(0, .25, 7)
  beta_phi[4] ~ dt(0, .25, 7)
  sigma.phi   ~ dnorm(0, .5) T(0,) #standard deviation for probability of survival random effect (release group)
  tau.phi     <- pow(sigma.phi, -2)

  beta           ~ dbeta(1, 1)
  sex_ratio      ~ dbeta(5, 5)
  resid_ratio[1] ~ dbeta(1, 9) # % of male population that residualize
  resid_ratio[2] ~ dbeta(1, 9) # % of female population that residualize

  ## gamma: probability of entering from potential population
  ## Event 0 through Event K - 2
  for (t in 1:(K - 2)) {
    e.gamma[t] ~ dnorm(0, tau.gamma)

    logit(gamma[t]) <- mean.gamma + e.gamma[t]
  }

  ## delta: probability of remaining in returning state
  ## Event 1 through Event K - 2
  for (t in 1:(K - 3)) {
    e.delta[1, t] ~ dnorm(0, tau.delta)
    e.delta[2, t] ~ dnorm(0, tau.delta)
    e.delta[3, t] ~ dnorm(0, tau.delta)
    e.delta[4, t] ~ dnorm(0, tau.delta)

    logit(delta[t, 1]) <- beta_delta[1] + e.delta[1, t]
    # different probability of transitioning to kelt for hatchery origin anadramous fish
    logit(delta[t, 2]) <- beta_delta[1] + beta_delta[2] + e.delta[2, t]
    # different probability of transitioning to spawner for natural origin anadramous fish
    logit(delta[t, 3]) <- beta_delta[1] + beta_delta[3] + e.delta[3, t]
    # different probability of transitioning to spawner for hatchery origin residual fish
    logit(delta[t, 4]) <- beta_delta[1] + beta_delta[2] + beta_delta[3] + beta_delta[4] + e.delta[4, t]
    # different probability of transitioning to spawner for natural origin residual fish
  }

  #phi: probability of moving to trap
  ## Event 1 through Event K - 1
  for (t in 1:(K - 2)) {
    e.phi[1, t] ~ dnorm(0, tau.phi)
    e.phi[2, t] ~ dnorm(0, tau.phi)
    e.phi[3, t] ~ dnorm(0, tau.phi)
    e.phi[4, t] ~ dnorm(0, tau.phi)

    logit(phi[t, 1]) <- beta_phi[1] + e.phi[1, t]
    # probability of transitioning to the trap for hatchery origin anadramous fish
    logit(phi[t, 2]) <- beta_phi[1] + beta_phi[2] + e.phi[2, t]
    # probability of transitioning to the trap for natural origin anadramous fish
    logit(phi[t, 3]) <- beta_phi[1] + beta_phi[3] + e.phi[3, t]
    # different probability of transitioning to the trap for hatchery origin residual fish
    logit(phi[t, 4]) <- beta_phi[1] + beta_phi[2] + beta_phi[3] + beta_phi[4] + e.phi[4, t]
    #probability of transitioning to the trap for natural origin residual fish
  }

  #p: detection probability
  #Event 1 through Event K - 1
  for (t in 1:(K - 2)) {
    e.p[t] ~ dnorm(0, tau.p)

    logit(p[t]) <- mean.p + e.p[t] #this means that detection efficiency is the same for each tangle net recapture
  }


  ####TRANSITION & OBSERVATION MATRICES

  for (i in 1:M){
    origin[i] ~ dbern(beta) # 0 - HOR, 1 - NOR
    sex[i]    ~ dbern(sex_ratio)  # 0 - M, 1 - F
    resid[i]  ~ dbern(resid_ratio[1 + sex[i]]) # 0 - anadramous, 1 - residual

    g[i] <- 1 + 1 * origin[i] + 2 * resid[i]

    ## Initial entry to Lewis River (all fish start as potential population)
    ##TRANSITION ## Event 0 -> Event 1
    ###########################
    #[time, individual, current state, next state]

    ps[1, i, 1, 1] <- 1 - gamma[1]
    ps[1, i, 1, 2] <- gamma[1]
    ps[1, i, 1, 3] <- 0
    ps[1, i, 1, 4] <- 0

    ps[1, i, 2, 1] <- 0
    ps[1, i, 2, 2] <- 1
    ps[1, i, 2, 3] <- 0
    ps[1, i, 2, 4] <- 0

    ps[1, i, 3, 1] <- 0
    ps[1, i, 3, 2] <- 0
    ps[1, i, 3, 3] <- 1
    ps[1, i, 3, 4] <- 0

    ps[1, i, 4, 1] <- 0
    ps[1, i, 4, 2] <- 0
    ps[1, i, 4, 3] <- 0
    ps[1, i, 4, 4] <- 1
    ##########################

    ##OBSERVATION## Event 1
    ###########################
    #[time, individual, actual state, observed state]

    po[1, i, 1, 1] <- 1
    po[1, i, 1, 2] <- 0
    po[1, i, 1, 3] <- 0
    po[1, i, 1, 4] <- 0

    po[1, i, 2, 1] <- 1 - p[1] * avail[i, 2]
    po[1, i, 2, 2] <- p[1] * avail[i, 2]
    po[1, i, 2, 3] <- 0
    po[1, i, 2, 4] <- 0

    po[1, i, 3, 1] <- 1 - p[1] * avail[i, 2]
    po[1, i, 3, 2] <- 0
    po[1, i, 3, 3] <- p[1] * avail[i, 2]
    po[1, i, 3, 4] <- 0

    po[1, i, 4, 1] <- 1 - avail[i, 2]
    po[1, i, 4, 2] <- 0
    po[1, i, 4, 3] <- 0
    po[1, i, 4, 4] <- avail[i, 2]
    ###########################

    for (k in 2:(K - 2)) {
      ##TRANSITION ## Event 1 -> Event 2, ..., Event K - 2 -> Event K - 1
      ###########################
      ps[k, i, 1, 1] <- 1 - gamma[k]
      ps[k, i, 1, 2] <- gamma[k]
      ps[k, i, 1, 3] <- 0
      ps[k, i, 1, 4] <- 0

      ps[k, i, 2, 1] <- 0
      ps[k, i, 2, 2] <- (delta[k - 1, g[i]] * avail[i, k]) + (1 - avail[i, k])
      ps[k, i, 2, 3] <- (1 - delta[k - 1, g[i]]) * (1 - phi[k - 1, g[i]]) * (avail[i, k])
      ps[k, i, 2, 4] <- (1 - delta[k - 1, g[i]]) * (phi[k - 1, g[i]]) * (avail[i, k])

      ps[k, i, 3, 1] <- 0
      ps[k, i, 3, 2] <- 0
      ps[k, i, 3, 3] <- 1
      ps[k, i, 3, 4] <- 0

      ps[k, i, 4, 1] <- 0
      ps[k, i, 4, 2] <- 0
      ps[k, i, 4, 3] <- 0
      ps[k, i, 4, 4] <- 1
      ###########################

      ##OBSERVATION## Event 2, ..., Event K - 1
      ###########################
      po[k, i, 1, 1] <- 1
      po[k, i, 1, 2] <- 0
      po[k, i, 1, 3] <- 0
      po[k, i, 1, 4] <- 0

      po[k, i, 2, 1] <- 1 - p[k] * avail[i, k + 1]
      po[k, i, 2, 2] <- p[k] * avail[i, k + 1]
      po[k, i, 2, 3] <- 0
      po[k, i, 2, 4] <- 0

      po[k, i, 3, 1] <- 1 - p[k] * avail[i, k + 1]
      po[k, i, 3, 2] <- 0
      po[k, i, 3, 3] <- p[k] * avail[i, k + 1]
      po[k, i, 3, 4] <- 0

      po[k, i, 4, 1] <- 1 - avail[i, k + 1]
      po[k, i, 4, 2] <- 0
      po[k, i, 4, 3] <- 0
      po[k, i, 4, 4] <- avail[i, k + 1]
      ###########################
    }

    ##TRANSITION ## Event K - 1 -> Event K
    ###########################
    # Turn all fish remaining on spawning grounds into spawners
    ps[K - 1, i, 1, 1] <- 1
    ps[K - 1, i, 1, 2] <- 0
    ps[K - 1, i, 1, 3] <- 0
    ps[K - 1, i, 1, 4] <- 0

    ps[K - 1, i, 2, 1] <- 0
    ps[K - 1, i, 2, 2] <- 1 - avail[i, K - 1]
    ps[K - 1, i, 2, 3] <- (1 - phi[K - 2, g[i]]) * avail[i, K - 1]
    ps[K - 1, i, 2, 4] <- phi[K - 2, g[i]] * avail[i, K - 1]

    ps[K - 1, i, 3, 1] <- 0
    ps[K - 1, i, 3, 2] <- 0
    ps[K - 1, i, 3, 3] <- 1
    ps[K - 1, i, 3, 4] <- 0

    ps[K - 1, i, 4, 1] <- 0
    ps[K - 1, i, 4, 2] <- 0
    ps[K - 1, i, 4, 3] <- 0
    ps[K - 1, i, 4, 4] <- 1
    ###########################

    ##OBSERVATION## Event K
    ###########################
    # No tangle-netting, only trap observations after last tangle-netting event.
    po[K - 1, i, 1, 1] <- 1
    po[K - 1, i, 1, 2] <- 0
    po[K - 1, i, 1, 3] <- 0
    po[K - 1, i, 1, 4] <- 0

    po[K - 1, i, 2, 1] <- 1
    po[K - 1, i, 2, 2] <- 0
    po[K - 1, i, 2, 3] <- 0
    po[K - 1, i, 2, 4] <- 0

    po[K - 1, i, 3, 1] <- 1
    po[K - 1, i, 3, 2] <- 0
    po[K - 1, i, 3, 3] <- 0
    po[K - 1, i, 3, 4] <- 0

    po[K - 1, i, 4, 1] <- 1 - avail[i, K]
    po[K - 1, i, 4, 2] <- 0
    po[K - 1, i, 4, 3] <- 0
    po[K - 1, i, 4, 4] <- avail[i, K]
    ###########################
  }

  ####LIKELIHOOD:
  for (i in 1:M){
    for (k in 2:K){
      z[i, k] ~ dcat(ps[k - 1, i, z[i, k - 1], ])
      y[i, k] ~ dcat(po[k - 1, i, z[i, k], ])
    }
  }

  ###DERIVED PARAMETERS:
  for (i in 1:M){
    NOR_entered[i] <- (1 - equals(z[i,K], 1)) * equals(origin[i], 1)
    HOR_entered[i] <- (1 - equals(z[i,K], 1)) * equals(origin[i], 0)
    NOR_spawn[i]   <- equals(z[i,K], 3) * equals(origin[i], 1)
    HOR_spawn[i]   <- equals(z[i,K], 3) * equals(origin[i], 0)
  }

  N_NOR_entered <- sum(NOR_entered[])
  N_HOR_entered <- sum(HOR_entered[])

  N_NOR_spawn <- sum(NOR_spawn[])
  N_HOR_spawn <- sum(HOR_spawn[])

  pHOS <- N_HOR_spawn/(N_HOR_spawn + N_NOR_spawn)
}
